buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            // content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "org.spongepowered.mixin"

mixin {
    add sourceSets.main, "alpha.refmap.json"
}

version = "${mc_version}-${mod_version}"
group = mod_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    //    mappings channel: 'official', version: mc_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=alpha.mixins.json'
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.debug', 'true'
            property 'mixin.hotSwap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'mixin.debug.countInjections', 'true'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=alpha.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDirs += 'src/generated/resources'
}

repositories {
    maven {
        // JEI fallback
        name = "Modmaven"
        url = "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        // AppleSkin
        name = "Squeek"
        url "https://maven.ryanliptak.com/"
        content {
            includeGroup "squeek.appleskin"
        }
    }
    maven {
        name = "Cursemaven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    def minecraftVersion = "net.minecraftforge:forge:${mc_version}-${forge_version}"
    minecraft minecraftVersion

    implementation fg.deobf("curse.maven:jade-324717:5493390")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))

    // at runtime, use the full JEI jar for Forge
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    compileOnly fg.deobf("squeek.appleskin:appleskin-forge:${appleskin_version}:api")
    runtimeOnly fg.deobf("squeek.appleskin:appleskin-forge:${appleskin_version}")

    // Generating Docs
    annotationProcessor minecraftVersion
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5")) {
        jarJar.ranged(it, "[0.3.5,)")
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Alpha",
                "Specification-Vendor"    : "OnesAndZer0s",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "OnesAndZer0s",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "alpha.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}